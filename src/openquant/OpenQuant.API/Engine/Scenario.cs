using OpenQuant.API;
using OpenQuant.Config;
using System;

namespace OpenQuant.API.Engine
{
	///<summary>
	///  A scenario
	///</summary>
	public class Scenario
	{

		/// <summary>
		/// Gets scenario Solution
		/// </summary>
		public Solution Solution
		{
			get
			{
				return IDE.Solution;
			}
		}

		/// <summary>
		/// Gets execution provider 
		/// </summary>
		public ExecutionProvider ExecutionProvider
		{
			get
			{
				return new ExecutionProvider(Configuration.Active.ExecutionProvider);
			}
		}

		/// <summary>
		/// Gets market data provider
		/// </summary>
		public MarketDataProvider MarketDataProvider
		{
			get
			{
				return new MarketDataProvider(Configuration.Active.MarketDataProvider);
			}
		}

		/// <summary>
		/// Sets portfolio pricer
		/// </summary>
		public PortfolioPricer PortfolioPricer
		{
			set
			{
				PortfolioManager.Pricer = (IPortfolioPricer)new SQPortfolioPricer(value);
			}
		}

		public StrategyMode Mode { get; private set; }

		/// <summary>
		/// Resets strategies and portfolios state on solution start
		/// </summary>
		public bool ResetOnStart { get; set; }

		/// <summary>
		/// Gets or sets value indicating if the current solution should be started over 
		/// results generated by the previous solution run
		/// </summary>
		public bool StartOver { get; set; }

		/// <summary>
		/// Occurs when solution start is requested by the scenario
		/// </summary>
		public event EventHandler StartRequested;

		/// <summary>
		/// Occurs when solution stop is requested by the scenario
		/// </summary>
		public event EventHandler StopRequested;

		/// <summary>
		/// Initializes a new instance of this class
		/// </summary>
		protected Scenario()
		{
			this.ResetOnStart = true;
			this.StartOver = false;
		}

		///<summary>
		///  Runs the scenario
		///</summary>
		public virtual void Run()
		{
			this.Start();
		}
		/// <summary>
		/// Starts the solution associated with the scenario in the specific mode
		/// </summary>
		/// <param name="mode">Mode.</param>
		protected void Start(StrategyMode mode)
		{
			if (this.StartRequested == null)
				return;
			this.StartRequested((object)mode, EventArgs.Empty);
		}

		/// <summary>
		/// Starts the solution associated with the scenario
		/// </summary>
		protected void Start()
		{
			this.Solution.OnStart();
			if (this.StartRequested == null)
				return;
			this.StartRequested((object)null, EventArgs.Empty);
		}

		/// <summary>
		/// Stops the solution associated with the scenario
		/// </summary>
		protected void Stop()
		{
			if (this.StopRequested == null)
				return;
			this.StopRequested((object)null, EventArgs.Empty);
		}
	}
}
